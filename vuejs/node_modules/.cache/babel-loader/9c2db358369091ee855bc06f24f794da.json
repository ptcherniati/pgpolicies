{
  "remainingRequest": "/home/philippe/git/ui/node_modules/babel-loader/lib/index.js!/home/philippe/git/ui/node_modules/eslint-loader/index.js??ref--13-0!/home/philippe/git/ui/src/plugins/MultiFilters.js",
  "dependencies": [
    {
      "path": "/home/philippe/git/ui/src/plugins/MultiFilters.js",
      "mtime": 1556400176322
    },
    {
      "path": "/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1556400173470
    },
    {
      "path": "/home/philippe/git/ui/node_modules/babel-loader/lib/index.js",
      "mtime": 1556400173250
    },
    {
      "path": "/home/philippe/git/ui/node_modules/eslint-loader/index.js",
      "mtime": 1556400174142
    }
  ],
  "contextDependencies": [],
  "result": [
    "import _Object$assign from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/core-js/object/assign\";\nimport _slicedToArray from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/core-js/object/entries\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _classCallCheck from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\n/**\n * Enabled v-data-table to have moire than one filter.\n */\nvar MultiFilters =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor.\n   *\n   * @param items\n   * @param filters\n   * @param filter\n   * @param headers\n   */\n  function MultiFilters(items, filters, filter, headers) {\n    _classCallCheck(this, MultiFilters);\n\n    this.items = items;\n    this.filter = filter;\n    this.headers = headers;\n    this.filters = filters;\n    this.filterCallbacks = {};\n  }\n  /**\n   * Updates filter values.\n   * @param filters filter?s object\n   * @param val JSON chunk to be updated.\n   * @returns {*}\n   */\n\n\n  _createClass(MultiFilters, [{\n    key: \"registerFilter\",\n\n    /**\n     * Adds a new filter\n     * @param filterName The name of the filter from which the information will be extracted\n     * @param filterCallback The callback that will apply the filter.\n     */\n    value: function registerFilter(filterName, filterCallback) {\n      this.filterCallbacks[filterName] = filterCallback;\n    }\n    /**\n     * Run all filters.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"runFilters\",\n    value: function runFilters() {\n      var self = this;\n      var filteredItems = self.items;\n\n      _Object$entries(this.filterCallbacks).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            entity = _ref2[0],\n            cb = _ref2[1];\n\n        filteredItems = cb.call(self, self.filters[entity], filteredItems);\n      });\n\n      return filteredItems;\n    }\n  }], [{\n    key: \"updateFilters\",\n    value: function updateFilters(filters, val) {\n      return _Object$assign({}, filters, val);\n    }\n  }]);\n\n  return MultiFilters;\n}(); // Vue plugin.\n\n\nvar MultiFiltersPlugin = {\n  install: function install(Vue, options) {\n    Vue.prototype.$MultiFilters = MultiFilters;\n  }\n};\nexport default MultiFiltersPlugin;",
    {
      "version": 3,
      "sources": [
        "/home/philippe/git/ui/src/plugins/MultiFilters.js"
      ],
      "names": [
        "MultiFilters",
        "items",
        "filters",
        "filter",
        "headers",
        "filterCallbacks",
        "filterName",
        "filterCallback",
        "self",
        "filteredItems",
        "forEach",
        "entity",
        "cb",
        "call",
        "val",
        "MultiFiltersPlugin",
        "install",
        "Vue",
        "options",
        "prototype",
        "$MultiFilters"
      ],
      "mappings": ";;;;;;;;AAAA;;;IAGMA,Y;;;AAEF;;;;;;;;AAQA,wBAAYC,KAAZ,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6C;AAAA;;AACzC,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKF,OAAL,GAAeA,OAAf;AACA,SAAKG,eAAL,GAAuB,EAAvB;AACH;AAED;;;;;;;;;;;AAUA;;;;;mCAKeC,U,EAAYC,c,EAAgB;AACvC,WAAKF,eAAL,CAAqBC,UAArB,IAAmCC,cAAnC;AACH;AAED;;;;;;;iCAIa;AACT,UAAMC,IAAI,GAAG,IAAb;AACA,UAAIC,aAAa,GAAGD,IAAI,CAACP,KAAzB;;AAEA,sBAAe,KAAKI,eAApB,EACKK,OADL,CACa,gBAAkB;AAAA;AAAA,YAAhBC,MAAgB;AAAA,YAARC,EAAQ;;AACvBH,QAAAA,aAAa,GAAGG,EAAE,CAACC,IAAH,CAAQL,IAAR,EAAcA,IAAI,CAACN,OAAL,CAAaS,MAAb,CAAd,EAAoCF,aAApC,CAAhB;AACH,OAHL;;AAKA,aAAOA,aAAP;AACH;;;kCA3BoBP,O,EAASY,G,EAAK;AAC/B,aAAO,eAAc,EAAd,EAAkBZ,OAAlB,EAA2BY,GAA3B,CAAP;AACH;;;;KA6BL;;;AACA,IAAMC,kBAAkB,GAAG;AACvBC,EAAAA,OADuB,mBACfC,GADe,EACVC,OADU,EACD;AAClBD,IAAAA,GAAG,CAACE,SAAJ,CAAcC,aAAd,GAA8BpB,YAA9B;AACH;AAHsB,CAA3B;AAMA,eAAee,kBAAf",
      "sourcesContent": [
        "/**\n * Enabled v-data-table to have moire than one filter.\n */\nclass MultiFilters {\n\n    /**\n     * Constructor.\n     *\n     * @param items\n     * @param filters\n     * @param filter\n     * @param headers\n     */\n    constructor(items, filters, filter, headers) {\n        this.items = items;\n        this.filter = filter;\n        this.headers = headers;\n        this.filters = filters;\n        this.filterCallbacks = {};\n    }\n\n    /**\n     * Updates filter values.\n     * @param filters filter?s object\n     * @param val JSON chunk to be updated.\n     * @returns {*}\n     */\n    static updateFilters(filters, val) {\n        return Object.assign({}, filters, val);\n    }\n\n    /**\n     * Adds a new filter\n     * @param filterName The name of the filter from which the information will be extracted\n     * @param filterCallback The callback that will apply the filter.\n     */\n    registerFilter(filterName, filterCallback) {\n        this.filterCallbacks[filterName] = filterCallback;\n    }\n\n    /**\n     * Run all filters.\n     * @returns {*}\n     */\n    runFilters() {\n        const self = this;\n        let filteredItems = self.items;\n\n        Object.entries(this.filterCallbacks)\n            .forEach(([entity, cb]) => {\n                filteredItems = cb.call(self, self.filters[entity], filteredItems);\n            });\n\n        return filteredItems;\n    }\n\n}\n\n// Vue plugin.\nconst MultiFiltersPlugin = {\n    install(Vue, options) {\n        Vue.prototype.$MultiFilters = MultiFilters;\n    }\n};\n\nexport default MultiFiltersPlugin;"
      ]
    }
  ]
}