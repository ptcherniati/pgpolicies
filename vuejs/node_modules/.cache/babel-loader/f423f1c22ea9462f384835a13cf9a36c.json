{
  "remainingRequest": "/home/philippe/git/ui/node_modules/babel-loader/lib/index.js!/home/philippe/git/ui/node_modules/vuetify-loader/lib/loader.js!/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/philippe/git/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippe/git/ui/src/components/Rights.vue?vue&type=script&lang=js&",
  "dependencies": [
    {
      "path": "/home/philippe/git/ui/src/components/Rights.vue",
      "mtime": 1556452618809
    },
    {
      "path": "/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1556400173470
    },
    {
      "path": "/home/philippe/git/ui/node_modules/babel-loader/lib/index.js",
      "mtime": 1556400173250
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vuetify-loader/lib/loader.js",
      "mtime": 1549812933000
    },
    {
      "path": "/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1556400173470
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vue-loader/lib/index.js",
      "mtime": 1556400176186
    }
  ],
  "contextDependencies": [],
  "result": [
    "import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _Object$values from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/core-js/object/values\";\nimport _Object$keys from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.filter\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport RightNode from \"@/components/RightNode\";\nimport http from \"@/http/http\";\nimport config from \"@/config\";\nimport { storage, Storage } from \"@/storage\";\nimport store from \"@/store\";\nexport default {\n  name: \"Rights\",\n  computed: {\n    pstdReference: function pstdReference() {\n      var reference = this.rights.references.filter(function (reference) {\n        return reference.name == \"types_de_donnees_par_themes_de_sites_et_projet\";\n      })[0];\n      this.getReference(reference, \"pstd\");\n      return reference;\n    },\n    dvuReference: function dvuReference() {\n      var reference = this.rights.references.filter(function (reference) {\n        return reference.name == \"variables_et_unites_par_types_de_donnees\";\n      })[0];\n      this.getReference(reference, \"dvu\");\n      return reference;\n    },\n    init: function init() {\n      var inited = {\n        pstdReference: this.pstdReference,\n        dvuReference: this.dvuReference\n      };\n      this.$emit(\"pstAndDvuInited\", inited);\n      return inited;\n    }\n  },\n  props: {\n    rights: Object\n  },\n  data: function data() {\n    return {\n      pstd_: {},\n      dvu: null,\n      deep: 0,\n      comlums: {},\n      visible: false\n    };\n  },\n  methods: {\n    getReference: function getReference(reference, to) {\n      var _this = this;\n\n      return http.loadReference(reference, config.APPLICATION_NAME).then(function (response) {\n        storage.set(Storage.TOKEN_KEY, response.data.token);\n        _this[to] = response.data;\n\n        if (to == \"pstd\") {\n          _this[\"pstd_\"] = _this.getPstd(reference.columns, response.data);\n        }\n\n        _this.$emit(\"update:\" + to, response.data);\n      }).catch(function (error) {\n        _this.pstd = {};\n\n        _this.$emit(\"error_\" + to, error);\n      });\n    },\n    getPstd: function getPstd(columns, data) {\n      if (_Object$keys(columns).length == 0) {\n        return {};\n      }\n\n      var column = _Object$values(columns)[this.deep].name;\n\n      var pstd = {};\n      data.forEach(function (element) {\n        var value = element.refValues[column];\n\n        if (pstd[value] == null) {\n          pstd[value] = [element];\n        } else {\n          pstd[value].push(element);\n        }\n      });\n      return pstd;\n    }\n  },\n  components: {\n    RightNode: RightNode\n  }\n};",
    {
      "version": 3,
      "sources": [
        "Rights.vue"
      ],
      "names": [],
      "mappings": "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",
      "sourcesContent": [
        "<template>\n  <div class=\"rights\">\n    <div @load=\"init\">\n      <div class=\"tree\">\n        <RightNode \n          v-if=\"pstd!=null\"\n          name=\"root\"\n          :deep=\"1\"\n          :pstd.sync=\"pstd\"\n          :dvu.sync=\"dvu\"\n          :configuration.sync=\"init\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport RightNode from \"@/components/RightNode\";\nimport http from \"@/http/http\";\nimport config from \"@/config\";\nimport { storage, Storage } from \"@/storage\";\nimport store from \"@/store\";\nexport default {\n  name: \"Rights\",\n  computed: {\n    pstdReference() {\n      const reference = this.rights.references.filter(\n        reference =>\n          reference.name == \"types_de_donnees_par_themes_de_sites_et_projet\"\n      )[0];\n      this.getReference(reference, \"pstd\");\n      return reference;\n    },\n    dvuReference() {\n      const reference = this.rights.references.filter(\n        reference =>\n          reference.name == \"variables_et_unites_par_types_de_donnees\"\n      )[0];\n      this.getReference(reference, \"dvu\");\n      return reference;\n    },\n    init() {\n      let inited = {\n        pstdReference: this.pstdReference,\n        dvuReference: this.dvuReference\n      };\n      this.$emit(\"pstAndDvuInited\", inited);\n      return inited;\n    },\n  },\n  props: {\n    rights: Object\n  },\n  data() {\n    return {\n      pstd_: {},\n      dvu: null,\n      deep: 0,\n      comlums: {},\n      visible:false,\n    };\n  },\n  methods: {\n    getReference(reference, to) {\n      return http\n        .loadReference(reference, config.APPLICATION_NAME)\n        .then(response => {\n          storage.set(Storage.TOKEN_KEY, response.data.token);\n          this[to] = response.data;\n          if (to == \"pstd\") {\n            this[\"pstd_\"] = this.getPstd(reference.columns, response.data);\n          }\n          this.$emit(\"update:\" + to, response.data);\n        })\n        .catch(error => {\n          this.pstd = {};\n          this.$emit(\"error_\" + to, error);\n        });\n    },\n    getPstd(columns, data) {\n      if (Object.keys(columns).length == 0) {\n        return {};\n      }\n      let column = Object.values(columns)[this.deep].name;\n      let pstd = {};\n      data.forEach(element => {\n        let value = element.refValues[column];\n        if (pstd[value] == null) {\n          pstd[value] = [element];\n        } else {\n          pstd[value].push(element);\n        }\n      });\n      return pstd;\n    }\n  },\n  components: {\n    RightNode\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.tree-list ul {\n  padding-left: 16px;\n  margin: 6px 0;\n}\n.references > table > tr > td {\n  border: solid 1px red;\n}\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"
      ],
      "sourceRoot": "src/components"
    }
  ]
}