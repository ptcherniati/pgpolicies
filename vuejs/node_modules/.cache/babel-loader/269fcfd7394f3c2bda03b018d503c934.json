{
  "remainingRequest": "/home/philippe/git/ui/node_modules/babel-loader/lib/index.js!/home/philippe/git/ui/node_modules/vuetify-loader/lib/loader.js!/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/philippe/git/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippe/git/ui/src/components/Synthesis.vue?vue&type=script&lang=js&",
  "dependencies": [
    {
      "path": "/home/philippe/git/ui/src/components/Synthesis.vue",
      "mtime": 1556452618809
    },
    {
      "path": "/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1556400173470
    },
    {
      "path": "/home/philippe/git/ui/node_modules/babel-loader/lib/index.js",
      "mtime": 1556400173250
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vuetify-loader/lib/loader.js",
      "mtime": 1549812933000
    },
    {
      "path": "/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1556400173470
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vue-loader/lib/index.js",
      "mtime": 1556400176186
    }
  ],
  "contextDependencies": [],
  "result": [
    "import \"core-js/modules/es6.array.map\";\nimport _Object$keys from \"/home/philippe/git/ui/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { storage, Storage } from \"@/storage\";\nimport store from \"@/store\";\nimport Vuex from \"vuex\";\nimport { GChart } from \"vue-google-charts\";\nexport default {\n  name: \"Synthesis\",\n  computed: {\n    datasets: {\n      get: function get() {\n        return store.state.configuration != null ? store.state.configuration.dataset : null;\n      }\n    },\n    dataType: {\n      get: function get() {\n        return store.state.dataType;\n      }\n    },\n    datasetDescription: {\n      get: function get() {\n        return store.state.datasetDescription;\n      }\n    },\n    variables: {\n      get: function get() {\n        return this.localStore.state.datasetName != null ? _Object$keys(this.datasets[this.localStore.state.datasetName].data) : null;\n      }\n    },\n    datasetName: {\n      get: function get() {\n        return store.state.datasetName;\n      }\n    },\n    datasetValue: {\n      get: function get() {\n        return store.state.datasetValue;\n      }\n    },\n    headers: {\n      get: function get() {\n        if (store.state.datasetDescription == null) {\n          return [];\n        }\n\n        return _Object$keys(store.state.datasetDescription.references).concat(_Object$keys(store.state.datasetDescription.data)).map(function (a) {\n          return {\n            text: a,\n            align: \"center\",\n            value: a\n          };\n        });\n      }\n    }\n  },\n  props: {},\n  data: function data() {\n    return {\n      // Array will be automatically processed with visualization.arrayToDataTable function\n      chartData: [['Year', 'Sales', 'Expenses', 'Profit'], ['2014', 1000, 400, 200], ['2015', 1170, 460, 250], ['2016', 660, 1120, 300], ['2017', 1030, 540, 350]],\n      chartOptions: {\n        chart: {\n          title: 'Company Performance',\n          subtitle: 'Sales, Expenses, and Profit: 2014-2017'\n        }\n      },\n      localStore: new Vuex.Store({\n        state: {\n          datasetName: null,\n          variableName: null,\n          data: null,\n          dataDescription: null\n        },\n        mutations: {\n          setDataset: function setDataset(state, payload) {\n            this.state.datasetName = payload.datasetName;\n            this.state.dataDescription = store.state.configuration.dataset[payload.datasetName];\n          },\n          setVariable: function setVariable(state, payload) {\n            this.state.variableName = payload.variableName;\n            this.state.data = store.state.data;\n          }\n        },\n        actions: {}\n      })\n    };\n  },\n  methods: {\n    setDataset: function setDataset(datasetName) {\n      this.localStore.commit(\"setDataset\", {\n        datasetName: datasetName\n      });\n    },\n    setVariable: function setVariable(variableName) {\n      this.localStore.commit(\"setVariable\", {\n        variableName: variableName\n      });\n    },\n    loadDataset: function loadDataset(_ref, dataset) {\n      var commit = _ref.commit;\n      http.loadDataset(dataset.datasetName, config.APPLICATION_NAME).then(function (response) {\n        response.json().then(function (data) {\n          commit(\"setDataset\", {\n            datasetValue: data,\n            datasetName: dataset.datasetName,\n            datasetDescription: dataset.datasetDescription\n          });\n        });\n      }).catch(function (error) {\n        return console.log(error);\n      });\n    }\n  },\n  components: {\n    GChart: GChart\n  }\n};",
    {
      "version": 3,
      "sources": [
        "Synthesis.vue"
      ],
      "names": [],
      "mappings": "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",
      "sourcesContent": [
        "<template>\n  <v-container\n    v-if=\"dataType!=null\"\n    class=\"dataset\"\n    fluid\n    grid-list-xl\n  >\n    <v-layout\n      v-if=\"dataType!=null\"\n      wrap\n      align-center\n    >\n      <v-flex\n        xs12\n        sm6\n        d-flex\n      >\n        <v-select\n          @input=\"setDataset\"\n          name=\"datasets\"\n          :items=\"dataType\"\n          label=\"Choisissez un type de donnÃ©es\"\n        />\n        <v-btn\n          flat\n          class=\"body-2\"\n        >\n          {{ localStore.state.datasetName }}\n        </v-btn>\n      </v-flex>\n    </v-layout>\n    <v-layout\n      v-if=\"localStore.state.datasetName!=null && datasets[localStore.state.datasetName]!=null\"\n      wrap\n      align-center\n    >\n      <v-flex\n        xs12\n        sm6\n        d-flex\n      >\n        <v-select\n          @input=\"setVariable\"\n          name=\"variables\"\n          :items=\"variables\"\n          label=\"Choisissez une variable\"\n        />\n        <v-btn\n          flat\n          class=\"body-2\"\n        >\n          {{ localStore.state.variableName }}\n        </v-btn>\n      </v-flex>\n    </v-layout>\n    <GChart\n      type=\"LineChart\"\n      :data=\"chartData\"\n      :options=\"chartOptions\"\n    />\n  </v-container>\n</template>\n\n<script>\nimport { storage, Storage } from \"@/storage\";\nimport store from \"@/store\";\nimport Vuex from \"vuex\";\nimport { GChart } from \"vue-google-charts\";\nexport default {\n  name: \"Synthesis\",\n  computed: {\n    datasets: {\n      get() {\n        return store.state.configuration != null\n          ? store.state.configuration.dataset\n          : null;\n      }\n    },\n    dataType: {\n      get() {\n        return store.state.dataType;\n      }\n    },\n    datasetDescription: {\n      get() {\n        return store.state.datasetDescription;\n      }\n    },\n    variables: {\n      get() {\n        return this.localStore.state.datasetName != null\n          ? Object.keys(this.datasets[this.localStore.state.datasetName].data)\n          : null;\n      }\n    },\n    datasetName: {\n      get() {\n        return store.state.datasetName;\n      }\n    },\n    datasetValue: {\n      get() {\n        return store.state.datasetValue;\n      }\n    },\n    headers: {\n      get() {\n        if (store.state.datasetDescription == null) {\n          return [];\n        }\n        return Object.keys(store.state.datasetDescription.references)\n          .concat(Object.keys(store.state.datasetDescription.data))\n          .map(a => {\n            return { text: a, align: \"center\", value: a };\n          });\n      }\n    }\n  },\n  props: {},\n  data() {\n    return {\n      // Array will be automatically processed with visualization.arrayToDataTable function\n      chartData: [\n        ['Year', 'Sales', 'Expenses', 'Profit'],\n        ['2014', 1000, 400, 200],\n        ['2015', 1170, 460, 250],\n        ['2016', 660, 1120, 300],\n        ['2017', 1030, 540, 350]\n      ],\n      chartOptions: {\n        chart: {\n          title: 'Company Performance',\n          subtitle: 'Sales, Expenses, and Profit: 2014-2017',\n        }\n      },\n      localStore: new Vuex.Store({\n        state: {\n          datasetName: null,\n          variableName: null,\n          data: null,\n          dataDescription: null\n        },\n        mutations: {\n          setDataset(state, payload) {\n            this.state.datasetName = payload.datasetName;\n            this.state.dataDescription =\n              store.state.configuration.dataset[payload.datasetName];\n          },\n          setVariable(state, payload) {\n            this.state.variableName = payload.variableName;\n            this.state.data = store.state.data;\n          }\n        },\n        actions: {}\n      })\n    };\n  },\n  methods: {\n    setDataset(datasetName) {\n      this.localStore.commit(\"setDataset\", {\n        datasetName: datasetName\n      });\n    },\n    setVariable(variableName) {\n      this.localStore.commit(\"setVariable\", {\n        variableName: variableName\n      });\n    },\n    loadDataset({ commit }, dataset) {\n      http\n        .loadDataset(dataset.datasetName, config.APPLICATION_NAME)\n        .then(response => {\n          response.json().then(function(data) {\n            commit(\"setDataset\", {\n              datasetValue: data,\n              datasetName: dataset.datasetName,\n              datasetDescription: dataset.datasetDescription\n            });\n          });\n        })\n        .catch(error => console.log(error));\n    }\n  },\n  components: {\n    GChart\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.references > table > tr > td {\n  border: solid 1px red;\n}\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"
      ],
      "sourceRoot": "src/components"
    }
  ]
}