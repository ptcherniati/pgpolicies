{
  "remainingRequest": "/home/philippe/git/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippe/git/ui/src/components/Synthesis.vue?vue&type=style&index=0&id=07581cd8&scoped=true&lang=scss&",
  "dependencies": [
    {
      "path": "/home/philippe/git/ui/src/components/Synthesis.vue",
      "mtime": 1556452618809
    },
    {
      "path": "/home/philippe/git/ui/node_modules/css-loader/index.js",
      "mtime": 1556400173766
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js",
      "mtime": 1556400176186
    },
    {
      "path": "/home/philippe/git/ui/node_modules/postcss-loader/src/index.js",
      "mtime": 1556400175662
    },
    {
      "path": "/home/philippe/git/ui/node_modules/sass-loader/lib/loader.js",
      "mtime": 1556400175870
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vuetify-loader/lib/loader.js",
      "mtime": 1549812933000
    },
    {
      "path": "/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1556400173470
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vue-loader/lib/index.js",
      "mtime": 1556400176186
    }
  ],
  "contextDependencies": [],
  "result": [
    "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.references > table > tr > td {\n  border: solid 1px red;\n}\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n",
    {
      "version": 3,
      "sources": [
        "Synthesis.vue"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
      "file": "Synthesis.vue",
      "sourceRoot": "src/components",
      "sourcesContent": [
        "<template>\n  <v-container\n    v-if=\"dataType!=null\"\n    class=\"dataset\"\n    fluid\n    grid-list-xl\n  >\n    <v-layout\n      v-if=\"dataType!=null\"\n      wrap\n      align-center\n    >\n      <v-flex\n        xs12\n        sm6\n        d-flex\n      >\n        <v-select\n          @input=\"setDataset\"\n          name=\"datasets\"\n          :items=\"dataType\"\n          label=\"Choisissez un type de donnÃ©es\"\n        />\n        <v-btn\n          flat\n          class=\"body-2\"\n        >\n          {{ localStore.state.datasetName }}\n        </v-btn>\n      </v-flex>\n    </v-layout>\n    <v-layout\n      v-if=\"localStore.state.datasetName!=null && datasets[localStore.state.datasetName]!=null\"\n      wrap\n      align-center\n    >\n      <v-flex\n        xs12\n        sm6\n        d-flex\n      >\n        <v-select\n          @input=\"setVariable\"\n          name=\"variables\"\n          :items=\"variables\"\n          label=\"Choisissez une variable\"\n        />\n        <v-btn\n          flat\n          class=\"body-2\"\n        >\n          {{ localStore.state.variableName }}\n        </v-btn>\n      </v-flex>\n    </v-layout>\n    <GChart\n      type=\"LineChart\"\n      :data=\"chartData\"\n      :options=\"chartOptions\"\n    />\n  </v-container>\n</template>\n\n<script>\nimport { storage, Storage } from \"@/storage\";\nimport store from \"@/store\";\nimport Vuex from \"vuex\";\nimport { GChart } from \"vue-google-charts\";\nexport default {\n  name: \"Synthesis\",\n  computed: {\n    datasets: {\n      get() {\n        return store.state.configuration != null\n          ? store.state.configuration.dataset\n          : null;\n      }\n    },\n    dataType: {\n      get() {\n        return store.state.dataType;\n      }\n    },\n    datasetDescription: {\n      get() {\n        return store.state.datasetDescription;\n      }\n    },\n    variables: {\n      get() {\n        return this.localStore.state.datasetName != null\n          ? Object.keys(this.datasets[this.localStore.state.datasetName].data)\n          : null;\n      }\n    },\n    datasetName: {\n      get() {\n        return store.state.datasetName;\n      }\n    },\n    datasetValue: {\n      get() {\n        return store.state.datasetValue;\n      }\n    },\n    headers: {\n      get() {\n        if (store.state.datasetDescription == null) {\n          return [];\n        }\n        return Object.keys(store.state.datasetDescription.references)\n          .concat(Object.keys(store.state.datasetDescription.data))\n          .map(a => {\n            return { text: a, align: \"center\", value: a };\n          });\n      }\n    }\n  },\n  props: {},\n  data() {\n    return {\n      // Array will be automatically processed with visualization.arrayToDataTable function\n      chartData: [\n        ['Year', 'Sales', 'Expenses', 'Profit'],\n        ['2014', 1000, 400, 200],\n        ['2015', 1170, 460, 250],\n        ['2016', 660, 1120, 300],\n        ['2017', 1030, 540, 350]\n      ],\n      chartOptions: {\n        chart: {\n          title: 'Company Performance',\n          subtitle: 'Sales, Expenses, and Profit: 2014-2017',\n        }\n      },\n      localStore: new Vuex.Store({\n        state: {\n          datasetName: null,\n          variableName: null,\n          data: null,\n          dataDescription: null\n        },\n        mutations: {\n          setDataset(state, payload) {\n            this.state.datasetName = payload.datasetName;\n            this.state.dataDescription =\n              store.state.configuration.dataset[payload.datasetName];\n          },\n          setVariable(state, payload) {\n            this.state.variableName = payload.variableName;\n            this.state.data = store.state.data;\n          }\n        },\n        actions: {}\n      })\n    };\n  },\n  methods: {\n    setDataset(datasetName) {\n      this.localStore.commit(\"setDataset\", {\n        datasetName: datasetName\n      });\n    },\n    setVariable(variableName) {\n      this.localStore.commit(\"setVariable\", {\n        variableName: variableName\n      });\n    },\n    loadDataset({ commit }, dataset) {\n      http\n        .loadDataset(dataset.datasetName, config.APPLICATION_NAME)\n        .then(response => {\n          response.json().then(function(data) {\n            commit(\"setDataset\", {\n              datasetValue: data,\n              datasetName: dataset.datasetName,\n              datasetDescription: dataset.datasetDescription\n            });\n          });\n        })\n        .catch(error => console.log(error));\n    }\n  },\n  components: {\n    GChart\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.references > table > tr > td {\n  border: solid 1px red;\n}\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"
      ]
    }
  ]
}