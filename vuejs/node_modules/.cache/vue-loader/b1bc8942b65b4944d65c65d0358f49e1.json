{
  "remainingRequest": "/home/philippe/git/ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/philippe/git/ui/src/components/Rights.vue?vue&type=style&index=0&id=cb5736f2&scoped=true&lang=scss&",
  "dependencies": [
    {
      "path": "/home/philippe/git/ui/src/components/Rights.vue",
      "mtime": 1556452618809
    },
    {
      "path": "/home/philippe/git/ui/node_modules/css-loader/index.js",
      "mtime": 1556400173766
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js",
      "mtime": 1556400176186
    },
    {
      "path": "/home/philippe/git/ui/node_modules/postcss-loader/src/index.js",
      "mtime": 1556400175662
    },
    {
      "path": "/home/philippe/git/ui/node_modules/sass-loader/lib/loader.js",
      "mtime": 1556400175870
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vuetify-loader/lib/loader.js",
      "mtime": 1549812933000
    },
    {
      "path": "/home/philippe/git/ui/node_modules/cache-loader/dist/cjs.js",
      "mtime": 1556400173470
    },
    {
      "path": "/home/philippe/git/ui/node_modules/vue-loader/lib/index.js",
      "mtime": 1556400176186
    }
  ],
  "contextDependencies": [],
  "result": [
    "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.tree-list ul {\n  padding-left: 16px;\n  margin: 6px 0;\n}\n.references > table > tr > td {\n  border: solid 1px red;\n}\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n",
    {
      "version": 3,
      "sources": [
        "Rights.vue"
      ],
      "names": [],
      "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
      "file": "Rights.vue",
      "sourceRoot": "src/components",
      "sourcesContent": [
        "<template>\n  <div class=\"rights\">\n    <div @load=\"init\">\n      <div class=\"tree\">\n        <RightNode \n          v-if=\"pstd!=null\"\n          name=\"root\"\n          :deep=\"1\"\n          :pstd.sync=\"pstd\"\n          :dvu.sync=\"dvu\"\n          :configuration.sync=\"init\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport RightNode from \"@/components/RightNode\";\nimport http from \"@/http/http\";\nimport config from \"@/config\";\nimport { storage, Storage } from \"@/storage\";\nimport store from \"@/store\";\nexport default {\n  name: \"Rights\",\n  computed: {\n    pstdReference() {\n      const reference = this.rights.references.filter(\n        reference =>\n          reference.name == \"types_de_donnees_par_themes_de_sites_et_projet\"\n      )[0];\n      this.getReference(reference, \"pstd\");\n      return reference;\n    },\n    dvuReference() {\n      const reference = this.rights.references.filter(\n        reference =>\n          reference.name == \"variables_et_unites_par_types_de_donnees\"\n      )[0];\n      this.getReference(reference, \"dvu\");\n      return reference;\n    },\n    init() {\n      let inited = {\n        pstdReference: this.pstdReference,\n        dvuReference: this.dvuReference\n      };\n      this.$emit(\"pstAndDvuInited\", inited);\n      return inited;\n    },\n  },\n  props: {\n    rights: Object\n  },\n  data() {\n    return {\n      pstd_: {},\n      dvu: null,\n      deep: 0,\n      comlums: {},\n      visible:false,\n    };\n  },\n  methods: {\n    getReference(reference, to) {\n      return http\n        .loadReference(reference, config.APPLICATION_NAME)\n        .then(response => {\n          storage.set(Storage.TOKEN_KEY, response.data.token);\n          this[to] = response.data;\n          if (to == \"pstd\") {\n            this[\"pstd_\"] = this.getPstd(reference.columns, response.data);\n          }\n          this.$emit(\"update:\" + to, response.data);\n        })\n        .catch(error => {\n          this.pstd = {};\n          this.$emit(\"error_\" + to, error);\n        });\n    },\n    getPstd(columns, data) {\n      if (Object.keys(columns).length == 0) {\n        return {};\n      }\n      let column = Object.values(columns)[this.deep].name;\n      let pstd = {};\n      data.forEach(element => {\n        let value = element.refValues[column];\n        if (pstd[value] == null) {\n          pstd[value] = [element];\n        } else {\n          pstd[value].push(element);\n        }\n      });\n      return pstd;\n    }\n  },\n  components: {\n    RightNode\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped lang=\"scss\">\n.tree-list ul {\n  padding-left: 16px;\n  margin: 6px 0;\n}\n.references > table > tr > td {\n  border: solid 1px red;\n}\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"
      ]
    }
  ]
}